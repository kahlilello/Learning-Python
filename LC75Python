LeetCode 75 - Python 

# Array/String

## Easy
   # 1076. Merge Strings Alternately
      def mergeAlternately(self, word1: str, word2: str) -> str:
             final = ''
             
             for i in range(min(len(word1), len(word2))):
                 final += word1[i] + word2[i]
     
             if len(word1) > len(word2):
                 final += word1[len(word2)::]
             
             elif len(word1) < len(word2):
                 final += word2[len(word1)::]
     
             return(final)
   
   # 1071. Greatest Common Divisor of Strings
       def gcdOfStrings(self, str1: str, str2: str) -> str:
           if str1+str2 != str2+str1:
               return ""

           a, b = len(str1), len(str2)
           while b:
               a, b = b, a%b
   
           gcd_len = a
           gcd_str = str1[:a]
           
           if str1 == gcd_str * (len(str1)//gcd_len) and str2 == gcd_str * (len(str2) // gcd_len):
               return gcd_str



    # 1431. Kids With the Greatest Number of Candies
         def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
           maxCandies = max(candies)
           for i in range(len(candies)):
               if candies[i] + extraCandies >= maxCandies:
                   candies[i] = True
               else:
                   candies[i] = False
           return candies

   # 605. Can Place Flowers
         def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
            copybed = flowerbed
            avail = 0
            for i in range(len(flowerbed)):
               if copybed[i] == 0 and (i == 0 or copybed[i-1] == 0) and (i == len(copybed) - 1 or copybed[i+1] ==0):
                  copybed[i] = 1
                  avail += 1
            return avail >= n

   # 345. Reverse Vowels of a String
         def reverseVowels(self, s: str) -> str:
                 vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
                 letters = []
                 for i in s:
                     if i in vowels:
                         letters.append(i)
                 
                 reverse = letters[::-1]
                 index = 0
                 final = []
                 for i in list(s):
                     if i in vowels:
                         final.append(reverse[index])
                         index += 1
                     else:
                         final.append(i)
                 
                 return ''.join(final)


# Two Pointers

## Easy

   # 283. Move Zeroes
      def moveZeroes(self, nums: List[int]) -> None:
           """
           Do not return anything, modify nums in-place instead.
           """
           for i in nums:
               if i == 0:
                   nums.remove(i)
                   nums.append(i)


         # 283. Move Zeroes - Using Pointers:
            def moveZeroes(self, nums: List[int]) -> None:
              """
              Do not return anything, modify nums in-place instead.
              """
              last = 0
              for current in range(len(nums)):
                  if nums[current] !=0:
                      nums[last], nums[current] = nums[current], nums[last]
                      last += 1

   # 392. Is Subsequence (100%, 73%)
            def isSubsequence(self, s: str, t: str) -> bool:
                    cnt = 0
                    if len(s) != 0:
                        for i in t:
                            if cnt < len(s):
                                if i == s[cnt]:
                                    cnt += 1
                    
                    return cnt == len(s)

         # 392. Is Subsequence (94%, 33%) - Using 2 pointers
            def isSubsequence(self, s: str, t: str) -> bool:
              sp, tp = 0, 0
              while sp < len(s) and tp < len(t):
                  if s[sp] == t[tp]:
                      sp += 1
                  tp += 1
              
              return sp == len(s)
        







