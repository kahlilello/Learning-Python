
#### Training on Tick Toward
def tick_toward(start, target):
    lst = [start]
    
    current = start
    
    while current[0] != target[0] or current[1] != target[1]:
        
        a = 0
        b = 0
        
        if (target[0]-current[0]) > 0:
            a = 1
        if (target[0]-current[0]) < 0:
            a = -1
            
        if (target[1]-current[1]) > 0:
            b = 1
        if (target[1]-current[1]) < 0:
            b = -1
            
        new = (current[0] + a, current[1] + b)
                
        lst.append(new)
        current = new
        
    #lst.append(target)
    
    return lst





######## Bouncing Balls
def bouncing_ball(h, bounce, window):
    # your code
    if h>0 and 0 < bounce < 1 and window<h:
        count = 1 
        bounce_h = h*bounce
        
        while bounce_h > window:
            count += 2
            bounce_h = bounce_h * bounce
        
        return count
        
        
        
    else:    
        return -1






######### Rectangle into Squares
def sq_in_rect(lng, wdth):
    # your code
    if lng == wdth:
        return None
    squares = []
    while lng > 0 and wdth > 0:
        if lng > wdth:
            squares.append(wdth)
            lng -= wdth
        else:
            squares.append(lng)
            wdth -= lng
    
    return squares




######### Multoples of 3 or 5
def solution(number):
    i = 0
    multiples = []
    while i < number:
        if i % 3 == 0 or i%5 == 0:
            multiples.append(i)
        i+=1
    
    
    return sum(multiples)







######### for CSE 6040 - Finding the odd int

def find_it(seq):
    
    sortedints = sorted(seq)
    current = None
    appearance = 0
    oddnum = None
    
    
    for num in sortedints:
        if current == num:
            appearance += 1
        else:
            if current is None and oddnum is None:
                current = num
                appearance += 1
            if current is not None and appearance % 2 != 0:
                oddnum = current
            else:
                appearance = 1
                current = num
    if current is not None and appearance % 2 != 0:
        oddnum = current
    
    return oddnum



        XOR Soln:
            def find_it(seq):
                result = 0
                for n in seq:
                    result ^= n
                
                return result




########### WeIrD StRiNg CaSe

def to_weird_case(words):
    
    new = ''
    
    idx = 0
    
    for word in words:
        if idx == 0 or idx%2 == 0:
            if word == ' ':
                new += ' '
                idx = 0
            else:
                new += word.upper()
                idx += 1
            
        else:
            if word == ' ':
                new += ' '
                idx = 0
            else:
                new += word.lower()
                idx += 1
            
        
    
    
    
    return new





############## Help the bookseller!

def stock_list(stocklist, categories):
    # your code here
    
    
    if len(stocklist) == 0 or len(categories) ==0:
        return ''
    
    
    
    cnt_dict = {}
    
    for category in categories:
        cnt_dict[category] = 0
        
    for stock in stocklist:
        if stock[0] in categories:
            splitted = stock.split(' ')
            cnt_dict[splitted[0][0]] += int(splitted[1])
    
    stocks = ''
    for key,value in cnt_dict.items():
        if stocks == '':
            stocks += '(' + key + ' : ' + str(value) + ')'
        else:
            stocks += ' - (' + key + ' : ' + str(value) + ')'
        
    
    return stocks





############ Perfect Square 



def perfect_square(square):
    
    lst = square.split('\n')
    
    cnt = []
    
    for l in lst:
        length = 0
        for i in l:
            if i == '.':
                length += 1
        
        if length > 0:
        
            cnt.append(length)
    
    
    
    # cnt == sorted(cnt) and 
    return cnt == sorted(cnt) and len((cnt))

def perfect_square(square):
    
    lst = square.split('\n')
    
    cnt = []
    length = 0
    for dot in square:
        
        if dot == '.':
            length += 1
        elif dot != '.' and length > 0:
            cnt.append(length)
            length = 0
            
    if length > 0:
        cnt.append(length)
        length = 0
        
    
    
    
    # cnt == sorted(cnt) and 
    return cnt # == sorted(cnt) and len((cnt)) > 0 and cnt[0] == len(cnt)
