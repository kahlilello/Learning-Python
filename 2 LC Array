# Leet Code Array


## Easy
  # 1 Two Sum
    def twoSum(self, nums: List[int], target: int) -> List[int]:
            for x in range(len(nums)):
                for y in range(len(nums)):
                    if x!=y and nums[x] + nums[y] == target:
                        return [x,y]

        # 1 Two Sum - 2nd try (O(n) instead of O(n2) and 100%)
              def twoSum(self, nums: List[int], target: int) -> List[int]:
                      searched = {}
                      i = 0
                      while i < len(nums):
                          complement = target - nums[i]
                          if complement in searched:
                              return [searched[complement], i]
                          searched[nums[i]] = i
                          i += 1

  # 27 Remove Element
      def removeElement(self, nums: List[int], val: int) -> int:
        x, y = 0, 0
        while y < len(nums):
            if nums[y] != val:
                nums[x], nums[y] = nums[y], nums[x]
                x += 1
            y += 1

        i = 0
        while i < len(nums):
            if nums[i] == val:
                nums.remove(nums[i])
            else:
                i += 1

            # 27 Remove Element - 2 (returning k)
              def removeElement(self, nums: List[int], val: int) -> int:
                k = 0
                for i in range(len(nums)):
                    if nums[i] != val:
                        nums[k] = nums[i]
                        k += 1
        
                return k

  # 169 Majority Element
    def majorityElement(self, nums: List[int]) -> int:
        cnt = {}
        for i in nums:
            if i in cnt:
                cnt[i] += 1
            else:
                cnt[i] = 1
        for key, count in cnt.items():
            if count > (len(nums)/2):
                return key


